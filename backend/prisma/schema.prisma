// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// 1. Core User Management
// =============================================

model User {
  id                      String   @id @default(uuid())
  email                   String?  @unique
  username                String   @unique
  phoneNumber             String?  @unique @map("phone_number")
  isPhoneVerified         Boolean  @default(false) @map("is_phone_verified")
  hashedPassword          String?  @map("hashed_password")
  
  // Phone verification fields
  phoneOtp                String?  @map("phone_otp")
  phoneOtpExpiresAt       DateTime? @map("phone_otp_expires_at")
  
  // Profile Fields
  profilePictureUrl       String?  @map("profile_picture_url")
  bio                     String?
  instagramHandle         String?  @map("instagram_handle")
  personalWebsiteUrl      String?  @map("personal_website_url")
  
  // Platform Flags (excluding Hyperwallet/Stripe for now)
  isUsernameAutogenerated Boolean  @default(true) @map("is_username_autogenerated")
  
  // Privacy Settings
  privacyShowUpcomingEvents              Boolean  @default(true) @map("privacy_show_upcoming_events")
  privacyShowPastEvents                  Boolean  @default(true) @map("privacy_show_past_events")
  privacyPastEventsIncludeHosted        Boolean  @default(true) @map("privacy_past_events_include_hosted")
  privacyPastEventsIncludeCollaborated  Boolean  @default(true) @map("privacy_past_events_include_collaborated")
  privacyPastEventsIncludeAttended      Boolean  @default(true) @map("privacy_past_events_include_attended")
  
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  // Relations
  hostedEvents            Event[]
  openPositionsFilled     OpenPosition[] @relation("FilledBy")
  applications            Application[]
  
  @@map("users")
}

// =============================================
// 2. Event Core
// =============================================

model Event {
  id                    String   @id @default(uuid())
  hostUserId            String   @map("host_user_id")
  title                 String
  description           String?
  coverImageUrl         String?  @map("cover_image_url")
  startTime             DateTime @map("start_time")
  endTime               DateTime @map("end_time")
  locationAddress       String   @map("location_address")
  status                EventStatus
  
  // Configuration & Rules
  locationVisibility    LocationVisibility @map("location_visibility")
  guestListVisibility   GuestListVisibility @map("guest_list_visibility")
  isInviteOnly          Boolean  @default(false) @map("is_invite_only")
  maxCapacity           Int?     @map("max_capacity")
  
  // Pricing
  pricingModel          PricingModel @map("pricing_model")
  currency              String   @default("USD")
  priceFixed            Decimal? @map("price_fixed") @db.Decimal(10, 2)
  priceMin              Decimal? @map("price_min") @db.Decimal(10, 2)
  priceSuggested        Decimal? @map("price_suggested") @db.Decimal(10, 2)
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relations
  host                  User     @relation(fields: [hostUserId], references: [id])
  openPositions         OpenPosition[]
  
  @@map("events")
}

// =============================================
// 3. Collaboration System - Open Positions
// =============================================

model OpenPosition {
  id                    String   @id @default(uuid())
  eventId               String   @map("event_id")
  roleTitle             String   @map("role_title") @db.VarChar(30)
  description           String?
  profitSharePercentage Decimal? @map("profit_share_percentage") @db.Decimal(5, 2)
  status                PositionStatus
  filledByUserId        String?  @map("filled_by_user_id")
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relations
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  filledBy              User?    @relation("FilledBy", fields: [filledByUserId], references: [id])
  applications          Application[]
  
  @@map("open_positions")
}

// =============================================
// 4. Applications
// =============================================

model Application {
  id                      String   @id @default(uuid())
  positionId              String   @map("position_id")
  userId                  String   @map("user_id")
  message                 String?
  status                  ApplicationStatus
  appliedAt               DateTime @default(now()) @map("applied_at")
  acceptedCollaborationId String?  @unique @map("accepted_collaboration_id")
  
  // Relations
  position                OpenPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)
  user                    User @relation(fields: [userId], references: [id])
  
  // Enforces one application per user per position
  @@unique([positionId, userId])
  @@map("applications")
}

// =============================================
// Enums
// =============================================

enum EventStatus {
  draft
  published
  live
  completed
  cancelled
}

enum LocationVisibility {
  immediate
  confirmed_guests
  twenty_four_hours_before @map("24_hours_before")
}

enum GuestListVisibility {
  public
  attendees_live
  private
}

enum PricingModel {
  fixed_price
  choose_your_price
  donation_based
  free_rsvp
}

enum PositionStatus {
  open
  filled
  closed
}

enum ApplicationStatus {
  pending
  accepted
  declined
  withdrawn
}
