import '../../../../core/network/api_client.dart';
import '../models/auth_models.dart';

// Handles only network communication using the centralized ApiClient (Dio)
class AuthApiService {
  final ApiClient _apiClient;

  AuthApiService(this._apiClient);

  Future<AuthResponse> signInWithGoogle() async {
    // TODO: Implement actual Google OAuth flow client-side, then exchange token with backend
    // await _apiClient.dio.post('/auth/oauth', data: {'provider': 'google', 'token': googleToken});
    
    await Future.delayed(const Duration(seconds: 2));
    
    // Mock response
    return AuthResponse(
      user: User(
        id: '123',
        username: 'google_user',
        email: 'user@gmail.com',
        isUsernameAutogenerated: true, // Crucial for forcing profile setup
        createdAt: DateTime.now(),
      ),
      token: 'mock_google_token',
    );
  }

  Future<AuthResponse> signInWithApple() async {
    // TODO: Implement actual Apple OAuth flow
    // await _apiClient.dio.post('/auth/oauth', data: {'provider': 'apple', 'token': appleToken});
    
    await Future.delayed(const Duration(seconds: 2));
        
    // Mock response
    return AuthResponse(
      user: User(
        id: '124',
        username: 'apple_user',
        email: 'user@icloud.com',
        isUsernameAutogenerated: true, // Crucial for forcing profile setup
        createdAt: DateTime.now(),
      ),
      token: 'mock_apple_token',
    );
  }

  Future<AuthResponse> signInWithEmail({
    required String email,
    required String password,
  }) async {
    final response = await _apiClient.dio.post(
      '/auth/login',
      data: {
        'email': email,
        'password': password,
      },
    );
    // Dio Interceptors handle error scenarios automatically
    return AuthResponse.fromJson(response.data);
  }

  Future<AuthResponse> signUpWithEmail({
    required String email,
    required String password,
  }) async {
    final response = await _apiClient.dio.post(
      '/auth/register',
      data: {
        'email': email,
        'password': password,
      },
    );
    // Dio Interceptors handle error scenarios (like 409 Conflict) automatically
    return AuthResponse.fromJson(response.data);
  }
}