// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// 1. Core User Management
// =============================================

model User {
  id                      String   @id @default(uuid())
  email                   String?  @unique
  username                String   @unique
  phoneNumber             String?  @unique @map("phone_number")
  isPhoneVerified         Boolean  @default(false) @map("is_phone_verified")
  hashedPassword          String?  @map("hashed_password")
  
  // Phone verification fields
  phoneOtp                String?  @map("phone_otp")
  phoneOtpExpiresAt       DateTime? @map("phone_otp_expires_at")
  
  // Profile Fields
  profilePictureUrl       String?  @map("profile_picture_url")
  bio                     String?
  instagramHandle         String?  @map("instagram_handle")
  personalWebsiteUrl      String?  @map("personal_website_url")
  
  // Platform Flags & Tokens (JIT Friction)
  hyperwalletUserToken    String?  @map("hyperwallet_user_token")
  stripeCustomerId        String?  @map("stripe_customer_id")
  isUsernameAutogenerated Boolean  @default(true) @map("is_username_autogenerated")
  
  // Privacy Settings (Screen 16)
  privacyShowUpcomingEvents              Boolean  @default(true) @map("privacy_show_upcoming_events")
  privacyShowPastEvents                  Boolean  @default(true) @map("privacy_show_past_events")
  privacyPastEventsIncludeHosted        Boolean  @default(true) @map("privacy_past_events_include_hosted")
  privacyPastEventsIncludeCollaborated  Boolean  @default(true) @map("privacy_past_events_include_collaborated")
  privacyPastEventsIncludeAttended      Boolean  @default(true) @map("privacy_past_events_include_attended")
  
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  // Relations
  hostedEvents            Event[]
  collaborations          Collaboration[] @relation("CollaborationUser")
  invitedCollaborations   Collaboration[] @relation("InvitedBy")
  openPositionsFilled     OpenPosition[] @relation("FilledBy")
  applications            Application[]
  transactions            Transaction[]
  payouts                 Payout[]
  sentInvitations         PrivateEventInvitation[] @relation("Inviter")
  receivedInvitations     PrivateEventInvitation[] @relation("Invitee")
  tickets                 Ticket[] @relation("TicketHolder")
  referredTickets         Ticket[] @relation("Referrer")
  ownedContacts           Contact[] @relation("ContactOwner")
  linkedContacts          Contact[] @relation("LinkedUser")
  eventAssociations       EventAssociation[]
  deviceTokens            DeviceToken[]
  notifications           Notification[]
  
  @@map("users")
}

// =============================================
// 2. Event Core
// =============================================

model Event {
  id                    String   @id @default(uuid())
  hostUserId            String   @map("host_user_id")
  title                 String
  description           String?
  coverImageUrl         String?  @map("cover_image_url")
  startTime             DateTime @map("start_time")
  endTime               DateTime @map("end_time")
  locationAddress       String   @map("location_address")
  status                EventStatus
  
  // Configuration & Rules (Screen 6)
  locationVisibility    LocationVisibility @map("location_visibility")
  guestListVisibility   GuestListVisibility @map("guest_list_visibility")
  isInviteOnly          Boolean  @default(false) @map("is_invite_only")
  maxCapacity           Int?     @map("max_capacity")
  
  // Pricing (Screen 6)
  pricingModel          PricingModel @map("pricing_model")
  currency              String   @default("USD")
  priceFixed            Decimal? @map("price_fixed") @db.Decimal(10, 2)
  priceMin              Decimal? @map("price_min") @db.Decimal(10, 2)
  priceSuggested        Decimal? @map("price_suggested") @db.Decimal(10, 2)
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relations
  host                  User     @relation(fields: [hostUserId], references: [id])
  collaborations        Collaboration[]
  openPositions         OpenPosition[]
  transactions          Transaction[]
  eventSettlement       EventSettlement?
  privateInvitations    PrivateEventInvitation[]
  tickets               Ticket[]
  eventAssociations     EventAssociation[]
  
  @@map("events")
}

// =============================================
// 3. Collaboration System
// =============================================

model Collaboration {
  id                    String   @id @default(uuid())
  eventId               String   @map("event_id")
  
  // Invitee Identification (Supports inviting users not yet registered via SMS)
  userId                String?  @map("user_id")
  invitedPhoneNumber    String?  @map("invited_phone_number")
  
  invitedByUserId       String?  @map("invited_by_user_id")
  
  // Role and Terms
  roleTitle             String   @map("role_title") @db.VarChar(30)
  profitSharePercentage Decimal  @default(0.00) @map("profit_share_percentage") @db.Decimal(5, 2)
  isCohost              Boolean  @default(false) @map("is_cohost")
  
  // Status tracking proposals, removals, and disputes (Screens 12, 21)
  status                CollaborationStatus
  invitationMessage     String?  @map("invitation_message")
  
  createdAt             DateTime @default(now()) @map("created_at")
  respondedAt           DateTime? @map("responded_at")
  
  // Relations
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                  User?    @relation("CollaborationUser", fields: [userId], references: [id])
  invitedBy             User?    @relation("InvitedBy", fields: [invitedByUserId], references: [id])
  payouts               Payout[]
  acceptedApplication   Application?
  
  @@map("collaborations")
}

model OpenPosition {
  id                    String   @id @default(uuid())
  eventId               String   @map("event_id")
  roleTitle             String   @map("role_title") @db.VarChar(30)
  description           String?
  profitSharePercentage Decimal? @map("profit_share_percentage") @db.Decimal(5, 2)
  status                PositionStatus
  filledByUserId        String?  @map("filled_by_user_id")
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relations
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  filledBy              User?    @relation("FilledBy", fields: [filledByUserId], references: [id])
  applications          Application[]
  
  @@map("open_positions")
}

model Application {
  id                        String   @id @default(uuid())
  positionId                String   @map("position_id")
  userId                    String   @map("user_id")
  message                   String?
  status                    ApplicationStatus
  appliedAt                 DateTime @default(now()) @map("applied_at")
  acceptedCollaborationId   String?  @unique @map("accepted_collaboration_id")
  
  // Relations
  position                  OpenPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)
  user                      User @relation(fields: [userId], references: [id])
  acceptedCollaboration     Collaboration? @relation(fields: [acceptedCollaborationId], references: [id])
  
  // Enforces SOW requirement: one application per user per position
  @@unique([positionId, userId])
  
  @@map("applications")
}

// =============================================
// 4. Financial System
// =============================================

model Transaction {
  id                String   @id @default(uuid())
  eventId           String   @map("event_id")
  userId            String   @map("user_id")
  amountGross       Decimal  @map("amount_gross") @db.Decimal(10, 2)
  platformFee       Decimal  @map("platform_fee") @db.Decimal(10, 2)
  stripeFee         Decimal  @map("stripe_fee") @db.Decimal(10, 2)
  amountNet         Decimal  @map("amount_net") @db.Decimal(10, 2)
  currency          String
  stripeChargeId    String?  @map("stripe_charge_id")
  status            TransactionStatus
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  event             Event    @relation(fields: [eventId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  tickets           Ticket[]
  
  @@map("transactions")
}

model EventSettlement {
  id                String   @id @default(uuid())
  eventId           String   @unique @map("event_id")
  grossRevenue      Decimal  @map("gross_revenue") @db.Decimal(12, 2)
  totalFees         Decimal  @map("total_fees") @db.Decimal(12, 2)
  netRevenue        Decimal  @map("net_revenue") @db.Decimal(12, 2)
  status            SettlementStatus
  confirmedAt       DateTime? @map("confirmed_at")
  
  // Relations
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  payouts           Payout[]
  
  @@map("event_settlements")
}

model Payout {
  id                    String   @id @default(uuid())
  settlementId          String   @map("settlement_id")
  collaborationId       String   @map("collaboration_id")
  userId                String   @map("user_id")
  amount                Decimal  @db.Decimal(12, 2)
  hyperwalletPaymentId  String?  @map("hyperwallet_payment_id")
  status                PayoutStatus
  paidAt                DateTime? @map("paid_at")
  
  // Relations
  settlement            EventSettlement @relation(fields: [settlementId], references: [id])
  collaboration         Collaboration @relation(fields: [collaborationId], references: [id])
  user                  User @relation(fields: [userId], references: [id])
  
  @@map("payouts")
}

// =============================================
// 5. Guest Management, Ticketing & Invitations
// =============================================

model PrivateEventInvitation {
  id                    String   @id @default(uuid())
  eventId               String   @map("event_id")
  inviterUserId         String   @map("inviter_user_id")
  inviteeUserId         String?  @map("invitee_user_id")
  inviteePhoneNumber    String?  @map("invitee_phone_number")
  status                InvitationStatus
  createdAt             DateTime @default(now()) @map("created_at")
  isSharable            Boolean  @default(true) @map("is_sharable")
  
  // Relations
  event                 Event    @relation(fields: [eventId], references: [id])
  inviter               User     @relation("Inviter", fields: [inviterUserId], references: [id])
  invitee               User?    @relation("Invitee", fields: [inviteeUserId], references: [id])
  tickets               Ticket[]
  
  @@map("private_event_invitations")
}

model Ticket {
  id                String   @id @default(uuid())
  eventId           String   @map("event_id")
  userId            String   @map("user_id")
  
  // Financial Link
  transactionId     String?  @map("transaction_id")
  
  // Attribution (SOW requirement)
  referrerUserId    String?  @map("referrer_user_id")
  invitationId      String?  @map("invitation_id")
  
  // Status (Screen 18, 19)
  rsvpStatus        RsvpStatus? @map("rsvp_status")
  checkedIn         Boolean  @default(false) @map("checked_in")
  checkedInAt       DateTime? @map("checked_in_at")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user              User     @relation("TicketHolder", fields: [userId], references: [id])
  transaction       Transaction? @relation(fields: [transactionId], references: [id])
  referrer          User?    @relation("Referrer", fields: [referrerUserId], references: [id])
  invitation        PrivateEventInvitation? @relation(fields: [invitationId], references: [id])
  
  @@map("tickets")
}

// =============================================
// 6. Community & Social Graph
// =============================================

model Contact {
  id                String   @id @default(uuid())
  ownerUserId       String   @map("owner_user_id")
  linkedUserId      String?  @map("linked_user_id")
  displayName       String   @map("display_name")
  phoneNumber       String?  @map("phone_number")
  source            ContactSource
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  owner             User     @relation("ContactOwner", fields: [ownerUserId], references: [id])
  linkedUser        User?    @relation("LinkedUser", fields: [linkedUserId], references: [id])
  
  // Prevents duplicate entries for the same owner linking the same user
  @@unique([ownerUserId, linkedUserId])
  
  @@map("contacts")
}

model EventAssociation {
  eventId           String   @map("event_id")
  userId            String   @map("user_id")
  role              EventRole
  
  // Relations
  event             Event    @relation(fields: [eventId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  
  @@id([eventId, userId])
  
  @@map("event_associations")
}

// =============================================
// 7. Supporting Systems
// =============================================

model DeviceToken {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  deviceToken       String   @map("device_token")
  deviceOs          DeviceOS @map("device_os")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceToken])
  
  @@map("device_tokens")
}

model Notification {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  title             String
  body              String?
  notificationType  String   @map("notification_type")
  linkUrl           String?  @map("link_url")
  isRead            Boolean  @default(false) @map("is_read")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model WebhookEvent {
  id                String   @id @default(uuid())
  source            String
  payload           Json
  status            WebhookStatus
  processedAt       DateTime? @map("processed_at")
  errorMessage      String?   @map("error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  
  @@map("webhook_events")
}

// =============================================
// ENUMS
// =============================================

enum EventStatus {
  draft
  published
  live
  completed
  cancelled
}

enum LocationVisibility {
  immediate
  confirmed_guests
  hours_24_before @map("24_hours_before")
}

enum GuestListVisibility {
  public
  attendees_live
  private
}

enum PricingModel {
  fixed_price
  choose_your_price
  donation_based
  free_rsvp
}

enum CollaborationStatus {
  pending
  accepted
  declined
  pending_removal
  removed
  disputed
}

enum PositionStatus {
  open
  filled
  closed
}

enum ApplicationStatus {
  pending
  accepted
  declined
  withdrawn
}

enum TransactionStatus {
  pending
  succeeded
  failed
  refunded
}

enum SettlementStatus {
  pending_review
  host_confirmed
  processing
  completed
  frozen_dispute
}

enum PayoutStatus {
  pending
  processing
  paid
  failed
}

enum InvitationStatus {
  pending
  accepted
  declined
}

enum RsvpStatus {
  going
  maybe
  not_going
}

enum ContactSource {
  manual
  phone_import
  guest_list_import
  profile_add
}

enum EventRole {
  host
  cohost
  collaborator
  attendee
}

enum DeviceOS {
  ios
  android
}

enum WebhookStatus {
  received
  processed
  failed
}