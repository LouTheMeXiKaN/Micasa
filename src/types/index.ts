// src/types/index.ts

export interface User {
  user_id: string;
  username: string;
  profile_picture_url?: string | null;
  bio?: string | null;
  is_username_autogenerated: boolean;
  email?: string;
  phone_number?: string;
}

export type PricingModel = 'fixed_price' | 'choose_your_price' | 'donation_based' | 'free_rsvp';
export type GuestListVisibility = 'public' | 'attendees_live' | 'private';
export type EventStatus = 'draft' | 'published' | 'live' | 'completed' | 'cancelled';

export interface Event {
  event_id: string;
  host_user_id: string;
  title: string;
  description?: string;
  cover_image_url?: string;
  start_time: string; // ISO Date string
  end_time: string;
  location_address: string; // Backend handles visibility masking
  location_visibility?: 'immediate' | 'confirmed_guests' | '24_hours_before';
  status: EventStatus;
  pricing_model: PricingModel;
  price_fixed?: number | null;
  price_minimum?: number | null;
  price_suggested?: number | null;
  guest_list_visibility: GuestListVisibility;
  is_invite_only?: boolean;
  max_capacity?: number | null;
}

export interface Collaboration {
  collaboration_id: string;
  user: User;
  role_title: string;
  is_cohost: boolean;
  profit_share_percentage?: number;
}

export interface OpenPosition {
  position_id: string;
  event_id: string;
  role_title: string;
  description?: string;
  profit_share_percentage?: number | null;
  status: 'open' | 'filled' | 'closed';
}

export interface EventStats {
  registered_count: number;
  maybe_count?: number;
  team_size: number;
  gross_revenue: number;
}

// Extended type for Event Page (W-1)
export interface EventDetails extends Event {
  team: Collaboration[];
  open_positions: OpenPosition[];
  attendees: User[]; // Only populated if visibility rules allow (handled by backend)
  attendee_count: number;
  stats?: EventStats;
  current_user_role?: 'host' | 'co-host' | 'collaborator' | 'attendee' | 'none';
}

// Represents the current user's context viewing an event (Determined by backend)
export interface UserEventContext {
  is_authenticated: boolean;
  // Role determines access level (SOW 3.2, 3.5)
  role: 'host' | 'cohost' | 'collaborator' | 'attendee' | 'public';
  rsvp_status?: 'going' | 'maybe' | 'not_going' | null;
  has_applied_to_position_ids: string[];
}

export interface ProposalDetails {
    proposal_id: string;
    event: Pick<Event, 'event_id' | 'title'>;
    host: User;
    role_title: string;
    profit_share_percentage: number;
    is_cohost: boolean;
    invited_phone_number: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

export interface ErrorResponse {
  error_code: string;
  message: string;
  details?: unknown;
}